{"version":3,"file":"static/js/171.d467ee6f.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charItem/CharItem.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'inline-block', width: '250', height: '250px', margin: '0 auto'}} src={img} alt=\"Error\" />\n    )\n};\n\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <div className=\"randomchar__img\">\n                 <img src={thumbnail} alt=\"Random character\" style={imgStyle}/>\n            </div>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import React from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport { useRef, useEffect, useState } from 'react';\n\nconst CharItem = ({ item, index, onCharSelected }) => {\n    // Use state to store the delay\n    const [delay, setDelay] = useState(0);\n    \n    let imgStyle = { 'objectFit': 'cover' };\n    if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'unset' };\n    }\n    \n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current[id].focus();\n    }\n        \n    const [itemRef, inViewItem] = useInView({\n        triggerOnce: true,\n        threshold: 0,\n    });\n\n    useEffect(() => {\n        // console.log('hhhh');\n        if (item) {\n            // Calculate the delay based on the element's index\n            let calculatedDelay = index >= 9 ? ((index - 9) % 9 + 1) * 100 : (index + 1) * 100 + 100;\n            if (index === 0) {\n                calculatedDelay = 100; // Set the delay to 0.1 seconds for the first element\n            }\n            setDelay(calculatedDelay);\n        }\n    }, [index]);\n\n\n    return (\n        <li\n            className={`char__item ${inViewItem ? 'in-view' : ''}`}\n            tabIndex={0}\n            ref={(el) => {\n                itemRefs.current[index] = el;\n                itemRef(el);\n            }}\n            style={{ transitionDelay: `${delay}ms` }} // Apply the calculated delay\n            onClick={() => {\n                // Call the focusOnItem function with the index of the clicked item\n                focusOnItem(index);\n                onCharSelected(item.id);\n            }}\n            onKeyDown={(e) => {\n                if (e.key === ' ' || e.key === 'Enter') {\n                onCharSelected(item.id);\n                focusOnItem(index);\n                }\n            }}\n        >\n        <div className=\"char__image\">\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n        </div>\n        <div className=\"char__name\">{item.name}</div>\n        </li>\n    );\n};\n\nexport default CharItem;\n","import PropTypes from 'prop-types';\nimport { useInView } from 'react-intersection-observer';\nimport React, { useState, useEffect, useMemo } from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport CharItem from '../charItem/CharItem';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    const [showLoadMoreButton, setShowLoadMoreButton] = useState(false);\n    \n    const {process, setProcess, getAllCharacters } = useMarvelService();\n\n    const [loadMoreButtonInViewRef, isLoadMoreButtonInView] = useInView({\n        triggerOnce: true,\n        threshold: 0,\n    });\n    \n    useEffect(() => {\n        setShowLoadMoreButton(isLoadMoreButtonInView);\n    }, [isLoadMoreButtonInView]);\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setnewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n\n        function renderItems(arr) {\n        return (\n        <ul className=\"char__grid\">\n            {arr.map((item, index) => (\n                <CharItem\n                    key={item.id}\n                    item={item}\n                    index={index}\n                    onCharSelected={props.onCharSelected}\n                />\n            ))}\n        </ul>\n        );\n    }\n\n    const content = useMemo(() => {\n        switch (process) {\n            case 'waiting':\n                return <Spinner />;\n            case 'loading':\n                return newItemLoading ? renderItems(charList) : <Spinner />;\n            case 'confirmed':\n                return renderItems(charList);\n            case 'error':\n                return <ErrorMessage />;\n            default:\n                throw new Error('Unexpected process state');\n        }\n    }, [process, newItemLoading, charList]);\n\n \n    return (\n        <div className=\"char__list\">\n            {content}\n            <button\n                ref={loadMoreButtonInViewRef}\n                disabled={newItemLoading || charEnded}\n                onClick={() => onRequest(offset)}\n                className={`button button__main button__long ${showLoadMoreButton ? 'visible' : ''}`}>\n            <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <div className=\"char__image\">\n                    <img src={thumbnail} alt={name} style={imgStyle}/>\n                </div>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={process === 'loading'}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n\n    state = {\n        error: false,\n    }\n\n    componentDidCatch(err, errInfo) {\n        console.log(err, errInfo);\n        this.setState({\n            error: true,\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage />\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import { useState } from \"react\";\nimport {Helmet} from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n    \n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                    />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div className=\"char__wrapper\">\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm />\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;","// import { useHttp } from \"../hooks/http.hook\";\n\n// const useMarvelService = () => {\n//     const { loading, error, clearError, request } = useHttp();\n\n//     const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n//     const _apiKey = 'apikey=35f739fa5a14330027377d5d09166596';\n//     const _baseOffset = 150;\n\n//     const getAllCharacters = async (offset = _baseOffset) => {\n//         const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n//         return res.data.results.map(_transformCharacter);\n//     }\n\n//     const getCharacter = async (id) => {\n//         const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n//         return _transformCharacter(res.data.results[0]);\n//     }\n\n//     const getCharacterByName = async (name) => {\n//         const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n//         return res.data.results.map(_transformCharacter);\n//     }\n\n\n//     const _transformCharacter = (char) => {\n//         return {\n//             id: char.id,\n//             name: char.name,\n//             description: char.description ? `${char.description.slice(0, 150)}...` : 'There is no description for this character',\n//             thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n//             homepage: char.urls[0].url,\n//             wiki: char.urls[1].url,\n//             comics: char.comics.items,\n//             loaded: false\n//         }\n//     }\n\n//     const getAllComics = async (offset = 170) => {\n//         const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n//         return res.data.results.map(_transformComics);\n//     }\n\n//     const getComic = async (id) => {\n// \t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n// \t\treturn _transformComics(res.data.results[0]);\n// \t};\n\n//     const _transformComics = (comics) => {\n//         return {\n// \t\t\tid: comics.id,\n// \t\t\ttitle: comics.title,\n// \t\t\tdescription: comics.description || \"There is no description\",\n// \t\t\tpageCount: comics.pageCount ? `${comics.pageCount} p.`: \"No information about the number of pages\",\n// \t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n// \t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n// \t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price}$` : \"not available\",\n// \t\t};\n//     }\n    \n//     const getTotalCharactersCount = async () => {\n//         const res = await request(`${_apiBase}characters?${_apiKey}`);\n//         return res.data.total;\n//     }\n\n//    return { loading, error, clearError, getCharacter, getCharacterByName, getAllCharacters, getTotalCharactersCount, getAllComics, getComic }\n// }\n\n// export default useMarvelService;\n\nimport { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\tconst { request, clearError, process, setProcess } = useHttp();\n\n\tconst _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n\tconst _apiKey = \"apikey=35f739fa5a14330027377d5d09166596\";\n\tconst _baseOffset = 210;\n\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n    };\n    \n    const getTotalCharactersCount = async () => {\n        const res = await request(`${_apiBase}characters?${_apiKey}`);\n        return res.data.total;\n    }\n\n\t// Вариант модификации готового метода для поиска по имени.\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\n\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\n\t//     return res.data.results.map(_transformCharacter);\n\t// }\n\n\t// Или можно создать отдельный метод для поиска по имени\n\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t};\n\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: \"There is no description for this character\",\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t};\n\t};\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\treturn {\n\t\tclearError,\n\t\tprocess,\n\t\tsetProcess,\n\t\tgetAllCharacters,\n\t\tgetCharacterByName,\n\t\tgetCharacter,\n\t\tgetAllComics,\n        getComic,\n        getTotalCharactersCount,\n\t};\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess}\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n        case 'loading':\n            return <Spinner/>;\n        case 'confirmed':\n            return <Component data={data}/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;"],"names":["_jsx","style","display","width","height","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","item","index","onCharSelected","delay","setDelay","itemRefs","useRef","focusOnItem","current","focus","_useInView","useInView","triggerOnce","threshold","_useInView2","itemRef","inViewItem","calculatedDelay","concat","tabIndex","ref","el","transitionDelay","onKeyDown","e","key","props","charList","setCharList","_useState3","_useState4","newItemLoading","setnewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","_useState9","_useState10","showLoadMoreButton","setShowLoadMoreButton","getAllCharacters","loadMoreButtonInViewRef","isLoadMoreButtonInView","onRequest","initial","onCharListLoaded","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newCharList","ended","wrap","_context","prev","next","length","_toConsumableArray","stop","_x","apply","arguments","renderItems","arr","map","CharItem","content","useMemo","Spinner","ErrorMessage","Error","disabled","comics","_Fragment","i","charId","getCharacterByName","errorMessage","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","error","_createClass","value","err","errInfo","console","log","this","setState","Component","selectedChar","Helmet","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_useHttp","request","useCallback","url","method","body","headers","response","_args","undefined","fetch","sent","ok","status","json","abrupt","t0","useHttp","_apiBase","_apiKey","res","_transformCharacter","getTotalCharactersCount","_ref2","_callee2","_context2","total","_ref3","_callee3","_context3","_ref4","_callee4","_context4","_x2","getAllComics","_ref5","_callee5","_args5","_context5","_transformComics","getComic","_ref6","_callee6","_context6","_x3","slice","path","extension","urls","items","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton"],"sourceRoot":""}