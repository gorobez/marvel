{"version":3,"file":"static/js/80.4f039961.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsItem/ComicsItem.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'inline-block', width: '250', height: '250px', margin: '0 auto'}} src={img} alt=\"Error\" />\n    )\n};\n\nexport default ErrorMessage;","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useInView } from 'react-intersection-observer';\n\nconst ComicsItem = ({ item, index }) => {\n    // Use state to store the delay\n    const [delay, setDelay] = useState(0);\n\n    const [itemRef, inViewItem] = useInView({\n        triggerOnce: true,\n        threshold: 0,\n    });\n\n    useEffect(() => {\n        if (item) {\n            // Calculate the delay based on the element's index\n            let calculatedDelay = index >= 8 ? ((index - 8) % 8 + 1) * 100 : (index + 1) * 100 + 100;\n            if (index === 0) {\n                calculatedDelay = 100; // Set the delay to 0.1 seconds for the first element\n            }\n            setDelay(calculatedDelay);\n        }\n    }, [index]);\n\n    return (\n        <div\n            className={`comics__item ${inViewItem ? 'in-view' : ''}`}\n            ref={(el) => {\n                itemRef(el);\n            }}\n            style={{ transitionDelay: `${delay}ms` }} // Apply the calculated delay\n        >\n            <Link to={`/comics/${item.id}`}>\n                <div className=\"comics__item-img\">\n                    <img src={item.thumbnail} alt={item.title} />\n                </div>\n                <div className=\"comics__item-name\">{item.title}</div>\n                <div className=\"comics__item-price\">{item.price}</div>\n            </Link>\n        </div>\n    );\n};\n\nexport default ComicsItem;\n","import { useState, useEffect, useMemo } from 'react';\nimport { useInView } from 'react-intersection-observer';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport ComicsItem from '../comicsItem/ComicsItem';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false); // відноситься до підгрузки по кліку\n    const [offset, setOffset] = useState(130);\n    const [comicsEnded, setComicsEnded] = useState(false); // властивість закінчення коміксів\n\n    // State variable to track whether the \"load more\" button should be visible\n    const [showLoadMoreButton, setShowLoadMoreButton] = useState(false);\n\n    const {getAllComics, process, setProcess} = useMarvelService();\n\n    // Use the useInView hook to detect when the \"load more\" button is in view\n    const [loadMoreButtonInViewRef, isLoadMoreButtonInView] = useInView({\n        triggerOnce: true,\n        threshold: 0,\n    });\n\n    useEffect(() => {\n        setShowLoadMoreButton(isLoadMoreButtonInView);\n    }, [isLoadMoreButtonInView]);\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setnewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems (arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <ComicsItem item={item} key={i} index={i} /> \n            )\n        })\n\n        return (\n            <div className=\"comics__grid\">{items}</div> \n        );\n    }\n\n    const content = useMemo(() => {\n        switch (process) {\n            case 'waiting':\n                return <Spinner />;\n            case 'loading':\n                return newItemLoading ? renderItems(comicsList) : <Spinner />;\n            case 'confirmed':\n                return renderItems(comicsList);\n            case 'error':\n                return <ErrorMessage />;\n            default:\n                throw new Error('Unexpected process state');\n        }\n    }, [process, newItemLoading, comicsList]);\n\n    return (\n        <div className=\"comics__list\">\n            {content}\n            <button\n                ref={loadMoreButtonInViewRef}\n                disabled={newItemLoading || comicsEnded}\n                onClick={() => onRequest(offset)}\n                className={`button button__main button__long ${showLoadMoreButton ? 'visible' : ''}`}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import {Helmet} from \"react-helmet\";\n\nimport ComicsList from \"../comicsList/ComicsList\";\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Page with list of our comics\"\n                />\n                <title>Comics page</title>\n            </Helmet>\n            <AppBanner/>\n            <ComicsList/>\n        </>\n    )\n}\n\nexport default ComicsPage;","// import { useHttp } from \"../hooks/http.hook\";\n\n// const useMarvelService = () => {\n//     const { loading, error, clearError, request } = useHttp();\n\n//     const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n//     const _apiKey = 'apikey=35f739fa5a14330027377d5d09166596';\n//     const _baseOffset = 150;\n\n//     const getAllCharacters = async (offset = _baseOffset) => {\n//         const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n//         return res.data.results.map(_transformCharacter);\n//     }\n\n//     const getCharacter = async (id) => {\n//         const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n//         return _transformCharacter(res.data.results[0]);\n//     }\n\n//     const getCharacterByName = async (name) => {\n//         const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n//         return res.data.results.map(_transformCharacter);\n//     }\n\n\n//     const _transformCharacter = (char) => {\n//         return {\n//             id: char.id,\n//             name: char.name,\n//             description: char.description ? `${char.description.slice(0, 150)}...` : 'There is no description for this character',\n//             thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n//             homepage: char.urls[0].url,\n//             wiki: char.urls[1].url,\n//             comics: char.comics.items,\n//             loaded: false\n//         }\n//     }\n\n//     const getAllComics = async (offset = 170) => {\n//         const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n//         return res.data.results.map(_transformComics);\n//     }\n\n//     const getComic = async (id) => {\n// \t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n// \t\treturn _transformComics(res.data.results[0]);\n// \t};\n\n//     const _transformComics = (comics) => {\n//         return {\n// \t\t\tid: comics.id,\n// \t\t\ttitle: comics.title,\n// \t\t\tdescription: comics.description || \"There is no description\",\n// \t\t\tpageCount: comics.pageCount ? `${comics.pageCount} p.`: \"No information about the number of pages\",\n// \t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n// \t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n// \t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price}$` : \"not available\",\n// \t\t};\n//     }\n    \n//     const getTotalCharactersCount = async () => {\n//         const res = await request(`${_apiBase}characters?${_apiKey}`);\n//         return res.data.total;\n//     }\n\n//    return { loading, error, clearError, getCharacter, getCharacterByName, getAllCharacters, getTotalCharactersCount, getAllComics, getComic }\n// }\n\n// export default useMarvelService;\n\nimport { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\tconst { request, clearError, process, setProcess } = useHttp();\n\n\tconst _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n\tconst _apiKey = \"apikey=35f739fa5a14330027377d5d09166596\";\n\tconst _baseOffset = 210;\n\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n    };\n    \n    const getTotalCharactersCount = async () => {\n        const res = await request(`${_apiBase}characters?${_apiKey}`);\n        return res.data.total;\n    }\n\n\t// Вариант модификации готового метода для поиска по имени.\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\n\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\n\t//     return res.data.results.map(_transformCharacter);\n\t// }\n\n\t// Или можно создать отдельный метод для поиска по имени\n\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t};\n\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: \"There is no description for this character\",\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t};\n\t};\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\treturn {\n\t\tclearError,\n\t\tprocess,\n\t\tsetProcess,\n\t\tgetAllCharacters,\n\t\tgetCharacterByName,\n\t\tgetCharacter,\n\t\tgetAllComics,\n        getComic,\n        getTotalCharactersCount,\n\t};\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess}\n}"],"names":["_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","style","display","width","height","margin","img","_ref","item","index","_useState","useState","_useState2","_slicedToArray","delay","setDelay","_useInView","useInView","triggerOnce","threshold","_useInView2","itemRef","inViewItem","useEffect","calculatedDelay","concat","ref","el","transitionDelay","Link","to","id","thumbnail","title","price","comicsList","setComicsList","_useState3","_useState4","newItemLoading","setnewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","comicsEnded","setComicsEnded","_useState9","_useState10","showLoadMoreButton","setShowLoadMoreButton","_useMarvelService","useMarvelService","getAllComics","process","setProcess","loadMoreButtonInViewRef","isLoadMoreButtonInView","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","_toConsumableArray","renderItems","arr","items","map","i","ComicsItem","content","useMemo","Spinner","ErrorMessage","Error","disabled","onClick","_Fragment","Helmet","name","AppBanner","ComicsList","_useHttp","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","undefined","fetch","sent","ok","status","json","abrupt","t0","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","res","results","_transformCharacter","getTotalCharactersCount","_ref2","_callee2","_context2","total","getCharacterByName","_ref3","_callee3","_context3","getCharacter","_ref4","_callee4","_context4","_x2","_ref5","_callee5","_args5","_context5","_transformComics","getComic","_ref6","_callee6","_context6","_x3","char","description","slice","path","extension","homepage","urls","wiki","comics","_comics$textObjects$","pageCount","language","textObjects","prices"],"sourceRoot":""}